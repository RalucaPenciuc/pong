{"version":3,"sources":["redux/actions/actions.ts","redux/actions/types.ts","components/StartPage.tsx","components/GameItem.tsx","components/GamesPage.tsx","components/GameTable.tsx","components/GameLobby.tsx","routes/Routes.tsx","App.tsx","serviceWorker.ts","redux/reducers/gameHandlers.ts","redux/reducers/gameReducer.ts","redux/sagas/Saga.ts","redux/store/configure-store.ts","index.tsx","sockets/configure-socket.ts"],"names":["startGame","gameId","type","payload","StartPage","className","to","onClick","props","connectPlayer","Component","connect","dispatch","undefined","GameItem","data","clientId","this","game","_id","joinGame","name","players","length","handleJoinButton","bind","state","joinGameBegin","GamesPage","newGameName","window","prompt","dataToSend","gameName","createGame","handleCreateGameButton","games","map","g","key","createGameBegin","GameTable","canvas","gameContext","React","createRef","current","getContext","drawGameTable","console","log","e","dataRequest","currentGame","direction","registerMove","ref","width","height","onKeyDown","handleKeyDownEvent","tabIndex","player","opponent","ball","drawRectangle","drawText","score","toString","x","y","drawCircle","radius","text","color","fillStyle","font","fillText","fillRect","beginPath","arc","Math","PI","closePath","fill","GameLobby","redirect","handleStartButton","handleLeaveButton","loading","redirectGameTable","Routes","exact","path","component","App","Boolean","location","hostname","match","connectPlayerBeginHandler","oldState","newState","error","connectPlayerSuccessHandler","connectPlayerErrorHandler","message","createGameBeginHandler","createGameSuccessHandler","newGames","slice","splice","createGameErrorHandler","joinGameBeginHandler","joinGameSuccessHandler","filter","updates","joinGameErrorHandler","startGameHandler","updateGameHandler","newGame","initialState","gameReducer","action","generalSaga","params","takeEvery","socket","send","JSON","stringify","method","sagaMiddleware","createSagaMiddleware","store","createStore","gamesReducer","composeWithDevTools","applyMiddleware","ws","WebSocket","onmessage","response","parse","connectPlayerSuccess","createGameSuccess","joinGameSuccess","updateGame","configureSocket","run","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.8bd093cd.chunk.js","sourcesContent":["import {\r\n  GameActionType,\r\n  CONNECT_PLAYER_SUCCESS,\r\n  CONNECT_PLAYER_BEGIN,\r\n  CONNECT_PLAYER_ERROR,\r\n  CREATE_GAME_BEGIN,\r\n  CREATE_GAME_SUCCESS,\r\n  CREATE_GAME_ERROR,\r\n  JOIN_GAME_BEGIN,\r\n  JOIN_GAME_SUCCESS,\r\n  JOIN_GAME_ERROR,\r\n  START_GAME,\r\n  REGISTER_MOVE,\r\n  UPDATE_GAME,\r\n} from \"./types\";\r\nimport {\r\n  ConnectResponse,\r\n  CreateGameResponse,\r\n  JoinGameResponse,\r\n  UpdateGameResponse,\r\n  ErrorResponse,\r\n} from \"../../models/Responses\";\r\nimport { CreateGameRequest, JoinGameRequest, RegisterMoveRequest } from \"../../models/Requests\";\r\n\r\nexport function connectPlayerBegin(): GameActionType {\r\n  return {\r\n    type: CONNECT_PLAYER_BEGIN,\r\n    payload: undefined,\r\n  };\r\n}\r\n\r\nexport function connectPlayerSuccess(data: ConnectResponse): GameActionType {\r\n  return {\r\n    type: CONNECT_PLAYER_SUCCESS,\r\n    payload: data,\r\n  };\r\n}\r\n\r\nexport function connectPlayerError(error: ErrorResponse): GameActionType {\r\n  return {\r\n    type: CONNECT_PLAYER_ERROR,\r\n    payload: error,\r\n  };\r\n}\r\n\r\nexport function createGameBegin(game: CreateGameRequest): GameActionType {\r\n  return {\r\n    type: CREATE_GAME_BEGIN,\r\n    payload: game,\r\n  };\r\n}\r\n\r\nexport function createGameSuccess(data: CreateGameResponse): GameActionType {\r\n  return {\r\n    type: CREATE_GAME_SUCCESS,\r\n    payload: data,\r\n  };\r\n}\r\n\r\nexport function createGameError(error: ErrorResponse): GameActionType {\r\n  return {\r\n    type: CREATE_GAME_ERROR,\r\n    payload: error,\r\n  };\r\n}\r\n\r\nexport function joinGameBegin(data: JoinGameRequest): GameActionType {\r\n  return {\r\n    type: JOIN_GAME_BEGIN,\r\n    payload: data,\r\n  };\r\n}\r\n\r\nexport function joinGameSuccess(data: JoinGameResponse): GameActionType {\r\n  return {\r\n    type: JOIN_GAME_SUCCESS,\r\n    payload: data,\r\n  };\r\n}\r\n\r\nexport function joinGameError(error: ErrorResponse): GameActionType {\r\n  return {\r\n    type: JOIN_GAME_ERROR,\r\n    payload: error,\r\n  };\r\n}\r\n\r\nexport function startGame(gameId: string): GameActionType {\r\n  return {\r\n    type: START_GAME,\r\n    payload: gameId,\r\n  };\r\n}\r\n\r\nexport function registerMove(direction: RegisterMoveRequest): GameActionType {\r\n  return {\r\n    type: REGISTER_MOVE,\r\n    payload: direction\r\n  }\r\n}\r\n\r\nexport function updateGame(data: UpdateGameResponse): GameActionType {\r\n  return {\r\n    type: UPDATE_GAME,\r\n    payload: data,\r\n  };\r\n}\r\n","import {\r\n  ConnectResponse,\r\n  CreateGameResponse,\r\n  JoinGameResponse,\r\n  UpdateGameResponse,\r\n  ErrorResponse,\r\n} from \"../../models/Responses\";\r\nimport {\r\n  CreateGameRequest,\r\n  JoinGameRequest,\r\n  RegisterMoveRequest,\r\n} from \"../../models/Requests\";\r\n\r\nexport const CONNECT_PLAYER_BEGIN = \"CONNECT_PLAYER_BEGIN\";\r\nexport const CONNECT_PLAYER_SUCCESS = \"CONNECT_PLAYER_SUCCESS\";\r\nexport const CONNECT_PLAYER_ERROR = \"CONNECT_PLAYER_ERROR\";\r\n\r\nexport const CREATE_GAME_BEGIN = \"CREATE_GAME_BEGIN\";\r\nexport const CREATE_GAME_SUCCESS = \"CREATE_GAME_SUCCESS\";\r\nexport const CREATE_GAME_ERROR = \"CREATE_GAME_ERROR\";\r\n\r\nexport const JOIN_GAME_BEGIN = \"JOIN_GAME_BEGIN\";\r\nexport const JOIN_GAME_SUCCESS = \"JOIN_GAME_SUCCESS\";\r\nexport const JOIN_GAME_ERROR = \"JOIN_GAME_ERROR\";\r\n\r\nexport const START_GAME = \"START_GAME\";\r\n\r\nexport const REGISTER_MOVE = \"REGISTER_MOVE\";\r\n\r\nexport const UPDATE_GAME = \"UPDATE_GAME\";\r\n\r\ninterface ConnectPlayerBegin {\r\n  type: typeof CONNECT_PLAYER_BEGIN;\r\n  payload: undefined;\r\n}\r\n\r\ninterface ConnectPlayerSuccess {\r\n  type: typeof CONNECT_PLAYER_SUCCESS;\r\n  payload: ConnectResponse;\r\n}\r\n\r\ninterface ConnectPlayerError {\r\n  type: typeof CONNECT_PLAYER_ERROR;\r\n  payload: ErrorResponse;\r\n}\r\n\r\ninterface CreateGameBegin {\r\n  type: typeof CREATE_GAME_BEGIN;\r\n  payload: CreateGameRequest;\r\n}\r\n\r\ninterface CreateGameSuccess {\r\n  type: typeof CREATE_GAME_SUCCESS;\r\n  payload: CreateGameResponse;\r\n}\r\n\r\ninterface CreateGameError {\r\n  type: typeof CREATE_GAME_ERROR;\r\n  payload: ErrorResponse;\r\n}\r\n\r\ninterface JoinGameBegin {\r\n  type: typeof JOIN_GAME_BEGIN;\r\n  payload: JoinGameRequest;\r\n}\r\n\r\ninterface JoinGameSuccess {\r\n  type: typeof JOIN_GAME_SUCCESS;\r\n  payload: JoinGameResponse;\r\n}\r\n\r\ninterface JoinGameError {\r\n  type: typeof JOIN_GAME_ERROR;\r\n  payload: ErrorResponse;\r\n}\r\n\r\ninterface StartGame {\r\n  type: typeof START_GAME;\r\n  payload: string;\r\n}\r\n\r\ninterface RegisterMove {\r\n  type: typeof REGISTER_MOVE;\r\n  payload: RegisterMoveRequest;\r\n}\r\n\r\ninterface UpdateGame {\r\n  type: typeof UPDATE_GAME;\r\n  payload: UpdateGameResponse;\r\n}\r\n\r\nexport type GameActionType =\r\n  | ConnectPlayerBegin\r\n  | ConnectPlayerSuccess\r\n  | ConnectPlayerError\r\n  | CreateGameBegin\r\n  | CreateGameSuccess\r\n  | CreateGameError\r\n  | JoinGameBegin\r\n  | JoinGameSuccess\r\n  | JoinGameError\r\n  | StartGame\r\n  | RegisterMove\r\n  | UpdateGame;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../assets/scss/StartPage.scss\";\r\nimport ArrowForwardIosRoundedIcon from \"@material-ui/icons/ArrowForwardIosRounded\";\r\nimport { connect } from \"react-redux\";\r\nimport { connectPlayerBegin } from \"../redux/actions/actions\";\r\n\r\ninterface IProps {\r\n  connectPlayer: Function;\r\n}\r\n\r\nclass StartPage extends Component<IProps, {}> {\r\n  render() {\r\n    return (\r\n      <div className=\"start-page-container\">\r\n        <p className=\"game-title\">PONG</p>\r\n        <div className=\"play-button-view\">\r\n          <ArrowForwardIosRoundedIcon />\r\n          <Link\r\n            className=\"play-button\"\r\n            to=\"/games\"\r\n            onClick={() => {\r\n              this.props.connectPlayer();\r\n            }}\r\n          >\r\n            Play\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    connectPlayer: () => dispatch(connectPlayerBegin()),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(StartPage);\r\n","import React, { Component } from \"react\";\r\nimport { Game } from \"../models/Game\";\r\nimport \"../assets/scss/GameItem.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport AppState from \"../redux/store/store\";\r\nimport { JoinGameRequest } from \"../models/Requests\";\r\nimport { joinGameBegin } from \"../redux/actions/actions\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ninterface IProps {\r\n  clientId: string;\r\n  joinGame: Function;\r\n  game: Game;\r\n}\r\n\r\ninterface IState {}\r\n\r\nclass GameItem extends Component<IProps, IState> {\r\n  handleJoinButton() {\r\n    const data: JoinGameRequest = {\r\n      clientId: this.props.clientId,\r\n      gameId: this.props.game._id,\r\n    };\r\n    this.props.joinGame(data);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game-item-container\">\r\n        <p className=\"game-item-component\">{this.props.game.name}</p>\r\n        <p className=\"game-item-component\">{this.props.game.players.length}</p>\r\n        <Link\r\n          to={`/game/${this.props.game._id}`}\r\n          onClick={this.handleJoinButton.bind(this)}\r\n        >\r\n          Join\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n  return {\r\n    clientId: state.clientId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    joinGame: (data: JoinGameRequest) => dispatch(joinGameBegin(data)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameItem);\r\n","import React, { Component } from \"react\";\r\nimport \"../assets/scss/GamesPage.scss\";\r\nimport AppState from \"../redux/store/store\";\r\nimport { connect } from \"react-redux\";\r\nimport { Game } from \"../models/Game\";\r\nimport GameItem from \"./GameItem\";\r\nimport { CreateGameRequest } from \"../models/Requests\";\r\nimport { createGameBegin } from \"../redux/actions/actions\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ninterface IProps {\r\n  clientId: string;\r\n  games: Game[];\r\n  createGame: Function;\r\n}\r\n\r\nclass GamesPage extends Component<IProps, {}> {\r\n  handleCreateGameButton() {\r\n    let newGameName = window.prompt(\"Enter the game's name: \");\r\n    if (newGameName) {\r\n      let dataToSend: CreateGameRequest = {\r\n        clientId: this.props.clientId,\r\n        gameName: newGameName,\r\n      };\r\n      this.props.createGame(dataToSend);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.clientId) {\r\n      return (\r\n        <div>\r\n          <div className=\"not-found-title\">404 Games Not Found</div>\r\n          <Link to=\"/\">Return to home page.</Link>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"games-page-container\">\r\n          <p className=\"page-title\">Available Games</p>\r\n          <div className=\"games-page-content\">\r\n            <button\r\n              className=\"create-game-button\"\r\n              onClick={this.handleCreateGameButton.bind(this)}\r\n            >\r\n              Create game\r\n            </button>\r\n            <div className=\"games-list\">\r\n              <div className=\"games-list-header\">\r\n                <p className=\"games-list-header-item\">Name</p>\r\n                <p className=\"games-list-header-item\">Players</p>\r\n                <p className=\"games-list-header-item\"></p>\r\n              </div>\r\n              {this.props.games.map((g: Game) => (\r\n                <GameItem key={g._id} game={g} />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n  clientId: state.clientId,\r\n  games: state.games,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    createGame: (game: CreateGameRequest) => dispatch(createGameBegin(game)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GamesPage);\r\n","import React, { Component } from \"react\";\r\nimport \"../assets/scss/GameTable.scss\";\r\nimport { Game } from \"../models/Game\";\r\nimport { connect } from \"react-redux\";\r\nimport AppState from \"../redux/store/store\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { registerMove } from \"../redux/actions/actions\";\r\nimport { RegisterMoveRequest } from \"../models/Requests\";\r\n\r\ninterface IProps {\r\n  clientId: string;\r\n  currentGame: Game | undefined;\r\n  registerMove: Function;\r\n}\r\n\r\ninterface IState {}\r\n\r\nclass GameTable extends Component<IProps, IState> {\r\n  private canvas: React.RefObject<HTMLCanvasElement>;\r\n  private gameContext: CanvasRenderingContext2D | null;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    this.canvas = React.createRef();\r\n    this.gameContext = null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.canvas.current) {\r\n      this.gameContext = this.canvas.current.getContext(\"2d\");\r\n      this.drawGameTable();  \r\n    } else console.log(\"componentDidMount: Canvas is null.\");\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.drawGameTable();\r\n  }\r\n\r\n  handleKeyDownEvent(e: React.KeyboardEvent) {\r\n    if (this.canvas.current) {\r\n      let dataRequest: RegisterMoveRequest = {\r\n        clientId: this.props.clientId,\r\n        gameId: this.props.currentGame?._id,\r\n        direction: e.key,\r\n      };\r\n      this.props.registerMove(dataRequest);\r\n    } else console.log(\"handleKeyDownEvent: Canvas is null.\");\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.currentGame) {\r\n      return (\r\n        <>\r\n          <div className=\"not-found-title\">404 Game Not Found</div>\r\n          <Link to=\"/\">Return to home page.</Link>\r\n        </>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"game-table-container\">\r\n          <canvas\r\n            ref={this.canvas}\r\n            width={1400}\r\n            height={700}\r\n            className=\"canvas\"\r\n            onKeyDown={this.handleKeyDownEvent.bind(this)}\r\n            tabIndex={0}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  drawGameTable(): void {\r\n    if (this.canvas.current) {\r\n      const player =\r\n        this.props.currentGame?.players[0]._id === this.props.clientId\r\n          ? this.props.currentGame.players[0]\r\n          : this.props.currentGame?.players[1];\r\n      const opponent =\r\n        this.props.currentGame?.players[0]._id !== this.props.clientId\r\n          ? this.props.currentGame?.players[0]\r\n          : this.props.currentGame.players[1];\r\n      const ball = this.props.currentGame?.ball;\r\n\r\n      if (player && opponent && ball) {\r\n        // clear the canvas\r\n        this.drawRectangle(0, 0, this.canvas.current.width, this.canvas.current.height, \"black\");\r\n\r\n        // draw the score\r\n        this.drawText(this.canvas.current.width / 5, this.canvas.current.height / 8, player.score.toString(), \"white\");\r\n        this.drawText((4 * this.canvas.current.width) / 5, this.canvas.current.height / 8, opponent.score.toString(), \"white\");\r\n\r\n        // draw the divider\r\n        this.drawRectangle(this.canvas.current.width / 2 - 2 / 2, 0, 2, this.canvas.current.height, \"white\");\r\n\r\n        // draw the players\r\n        this.drawRectangle(player.x, player.y, 15, 150, \"white\");\r\n        this.drawRectangle(opponent.x, opponent.y, 15, 150, \"white\");\r\n\r\n        // draw the ball\r\n        this.drawCircle(ball.x, ball.y, ball.radius, \"white\");\r\n      } else console.log(\"drawGameTable: state elements are null.\");\r\n    } else console.log(\"drawGameTable: Canvas is null.\");\r\n  }\r\n\r\n  drawText(x: number, y: number, text: string, color: string): void {\r\n    if (this.gameContext) {\r\n      this.gameContext.fillStyle = color;\r\n      this.gameContext.font = \"50px cursive\";\r\n      this.gameContext.fillText(text, x, y);\r\n    } else console.log(\"drawText: Context is null.\");\r\n  }\r\n\r\n  drawRectangle(x: number, y: number, width: number, height: number, color: string): void {\r\n    if (this.gameContext) {\r\n      this.gameContext.fillStyle = color;\r\n      this.gameContext.fillRect(x, y, width, height);\r\n    } else console.log(\"drawRectangle: Context is null.\");\r\n  }\r\n\r\n  drawCircle(x: number, y: number, radius: number, color: string): void {\r\n    if (this.gameContext) {\r\n      this.gameContext.fillStyle = color;\r\n      this.gameContext.beginPath();\r\n      this.gameContext.arc(x, y, radius, 0, Math.PI * 2, false);\r\n      this.gameContext.closePath();\r\n      this.gameContext.fill();\r\n    } else console.log(\"drawCircle: Context is null.\");\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n  return {\r\n    clientId: state.clientId,\r\n    currentGame: state.currentGame,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    registerMove: (data: RegisterMoveRequest) => dispatch(registerMove(data)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameTable);\r\n","import React, { Component } from \"react\";\r\nimport \"../assets/scss/GameLobby.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport AppState from \"../redux/store/store\";\r\nimport { Game } from \"../models/Game\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { startGame } from \"../redux/actions/actions\";\r\n\r\ninterface IProps {\r\n  loading: boolean;\r\n  currentGame: Game | undefined;\r\n  redirect: boolean;\r\n  startGame: Function;\r\n  //   leaveLobby: Function;\r\n}\r\n\r\nclass GameLobby extends Component<IProps, {}> {\r\n  handleStartButton() {\r\n    this.props.startGame(this.props.currentGame?._id);\r\n  }\r\n\r\n  handleLeaveButton() {\r\n    // this.props.leaveLobby();\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.currentGame) {\r\n      return (\r\n        <div>\r\n          <div className=\"not-found-title\">404 Game Not Found</div>\r\n          <Link to=\"/\">Return to home page.</Link>\r\n        </div>\r\n      );\r\n    } else if (this.props.redirect) {\r\n      return <Redirect to={`/game/${this.props.currentGame._id}/start`} />;\r\n    } else {\r\n      return (\r\n        <div className=\"game-lobby-container\">\r\n          <div className=\"game-lobby-title\">\r\n            {this.props.currentGame.name}:{\"   \"}\r\n            {this.props.currentGame.players.length} out of 2 players\r\n          </div>\r\n          <div className=\"game-lobby-players\">\r\n            <div className=\"player\">\r\n              {this.props.currentGame.players[0]\r\n                ? this.props.currentGame.players[0]._id\r\n                : \"\"}\r\n            </div>\r\n            <div className=\"player\">\r\n              {this.props.currentGame.players[1]\r\n                ? this.props.currentGame.players[1]._id\r\n                : \"\"}\r\n            </div>\r\n          </div>\r\n          <div className=\"game-lobby-actions\">\r\n            <Link\r\n              className={\r\n                this.props.currentGame.players.length < 2\r\n                  ? \"start-game-disabled\"\r\n                  : \"start-game-enabled\"\r\n              }\r\n              to={`/game/${this.props.currentGame._id}/start`}\r\n              onClick={this.handleStartButton.bind(this)}\r\n            >\r\n              Start game\r\n            </Link>\r\n            <button onClick={this.handleLeaveButton.bind(this)}>\r\n              Leave lobby\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n  return {\r\n    loading: state.loading,\r\n    currentGame: state.currentGame,\r\n    redirect: state.redirectGameTable,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    startGame: (gameId: string) => dispatch(startGame(gameId)),\r\n    // leaveLobby: () => dispatch(leaveLobby()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameLobby);\r\n","import React, { Component } from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport StartPage from \"../components/StartPage\";\r\nimport GamesPage from \"../components/GamesPage\";\r\nimport GameTable from \"../components/GameTable\";\r\nimport GameLobby from \"../components/GameLobby\";\r\n\r\nexport default class Routes extends Component {\r\n  render() {\r\n    return (\r\n      <Switch>\r\n        <Route exact path=\"/\" component={StartPage} />\r\n        <Route exact path=\"/games\" component={GamesPage} />\r\n        <Route exact path=\"/game/:id\" component={GameLobby} />\r\n        <Route exact path=\"/game/:id/start\" component={GameTable} />\r\n      </Switch>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./assets/scss/App.scss\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport Routes from \"./routes/Routes\";\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"app-container\">\r\n        <BrowserRouter>\r\n          <Routes />\r\n        </BrowserRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import AppState from \"../store/store\";\r\nimport {\r\n  ConnectResponse,\r\n  ErrorResponse,\r\n  CreateGameResponse,\r\n  JoinGameResponse,\r\n  UpdateGameResponse,\r\n} from \"../../models/Responses\";\r\nimport { Game } from \"../../models/Game\";\r\n\r\nexport function connectPlayerBeginHandler(oldState: AppState): AppState {\r\n  const newState = { ...oldState };\r\n  newState.loading = true;\r\n  newState.error = \"\";\r\n  return newState;\r\n}\r\n\r\nexport function connectPlayerSuccessHandler(oldState: AppState, data: ConnectResponse): AppState {\r\n  const newState = { ...oldState };\r\n  newState.loading = false;\r\n  newState.error = \"\";\r\n  newState.clientId = data.clientId;\r\n  newState.games = data.games;\r\n  return newState;\r\n}\r\n\r\nexport function connectPlayerErrorHandler(oldState: AppState, error: ErrorResponse): AppState {\r\n  const newState = { ...oldState };\r\n  newState.loading = false;\r\n  newState.error = error.message;\r\n  return newState;\r\n}\r\n\r\nexport function createGameBeginHandler(oldState: AppState): AppState {\r\n  const newState = { ...oldState };\r\n  newState.loading = true;\r\n  newState.error = \"\";\r\n  return newState;\r\n}\r\n\r\nexport function createGameSuccessHandler(oldState: AppState, data: CreateGameResponse): AppState {\r\n  const newState = { ...oldState };\r\n  newState.loading = false;\r\n  let newGames = newState.games.slice();\r\n  newGames.splice(0, 0, data.game);\r\n  newState.games = newGames;\r\n  newState.error = \"\";\r\n  return newState;\r\n}\r\n\r\nexport function createGameErrorHandler(oldState: AppState, error: ErrorResponse): AppState {\r\n  const newState = { ...oldState };\r\n  newState.loading = false;\r\n  newState.error = error.message;\r\n  return newState;\r\n}\r\n\r\nexport function joinGameBeginHandler(oldState: AppState): AppState {\r\n  const newState = { ...oldState };\r\n  newState.loading = true;\r\n  newState.error = \"\";\r\n  return newState;\r\n}\r\n\r\nexport function joinGameSuccessHandler(oldState: AppState, data: JoinGameResponse): AppState {\r\n  const newState = { ...oldState };\r\n  newState.loading = false;\r\n  newState.error = \"\";\r\n  newState.currentGame = data.game;\r\n  if (data.game.players.length === 2) {\r\n    newState.games = oldState.games.filter(game => game._id !== data.game._id);\r\n  } else {\r\n    let newGames = newState.games.map((g: Game) => {\r\n        if (g._id === data.game._id) {\r\n          let updates: Game = {\r\n            _id: g._id,\r\n            name: g.name,\r\n            players: data.game.players,\r\n            ball: data.game.ball\r\n          };\r\n          g = { ...updates };\r\n        }\r\n        return g;\r\n      });\r\n      newState.games = newGames;\r\n  }\r\n\r\n  return newState;\r\n}\r\n\r\nexport function joinGameErrorHandler(oldState: AppState, error: ErrorResponse): AppState {\r\n  const newState = { ...oldState };\r\n  newState.loading = false;\r\n  newState.error = error.message;\r\n  return newState;\r\n}\r\n\r\nexport function startGameHandler(oldState: AppState): AppState {\r\n  const newState = { ...oldState };\r\n  newState.redirectGameTable = true;\r\n  return newState;\r\n}\r\n\r\nexport function updateGameHandler(oldState: AppState, newGame: UpdateGameResponse): AppState {\r\n  const newState = { ...oldState };\r\n  newState.currentGame = newGame.game;\r\n  return newState;\r\n}","import AppState from \"../store/store\";\r\nimport {\r\n  GameActionType,\r\n  CONNECT_PLAYER_SUCCESS,\r\n  CONNECT_PLAYER_BEGIN,\r\n  CONNECT_PLAYER_ERROR,\r\n  CREATE_GAME_BEGIN,\r\n  CREATE_GAME_SUCCESS,\r\n  CREATE_GAME_ERROR,\r\n  JOIN_GAME_BEGIN,\r\n  JOIN_GAME_SUCCESS,\r\n  JOIN_GAME_ERROR,\r\n  START_GAME,\r\n  UPDATE_GAME,\r\n} from \"../actions/types\";\r\nimport {\r\n  connectPlayerBeginHandler,\r\n  connectPlayerSuccessHandler,\r\n  connectPlayerErrorHandler,\r\n  createGameBeginHandler,\r\n  createGameSuccessHandler,\r\n  createGameErrorHandler,\r\n  joinGameBeginHandler,\r\n  joinGameSuccessHandler,\r\n  joinGameErrorHandler,\r\n  startGameHandler,\r\n  updateGameHandler,\r\n} from \"./gameHandlers\";\r\n\r\nexport const initialState: AppState = {\r\n  clientId: \"\",\r\n  games: [],\r\n  currentGame: undefined,\r\n  redirectGameTable: false,\r\n  loading: false,\r\n  error: \"\",\r\n};\r\n\r\nconst gameReducer = (state = initialState, action: GameActionType): AppState => {\r\n  switch (action.type) {\r\n    case CONNECT_PLAYER_BEGIN:\r\n      return connectPlayerBeginHandler(state);\r\n    case CONNECT_PLAYER_SUCCESS:\r\n      return connectPlayerSuccessHandler(state, action.payload);\r\n    case CONNECT_PLAYER_ERROR:\r\n      return connectPlayerErrorHandler(state, action.payload);\r\n\r\n    case CREATE_GAME_BEGIN:\r\n      return createGameBeginHandler(state);\r\n    case CREATE_GAME_SUCCESS:\r\n      return createGameSuccessHandler(state, action.payload);\r\n    case CREATE_GAME_ERROR:\r\n      return createGameErrorHandler(state, action.payload);\r\n\r\n    case JOIN_GAME_BEGIN:\r\n      return joinGameBeginHandler(state);\r\n    case JOIN_GAME_SUCCESS:\r\n      return joinGameSuccessHandler(state, action.payload);\r\n    case JOIN_GAME_ERROR:\r\n      return joinGameErrorHandler(state, action.payload);\r\n\r\n    case START_GAME:\r\n      return startGameHandler(state);\r\n    \r\n    case UPDATE_GAME:\r\n      return updateGameHandler(state, action.payload);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default gameReducer;\r\n","import { takeEvery } from \"@redux-saga/core/effects\";\r\nimport {\r\n  CONNECT_PLAYER_BEGIN,\r\n  CREATE_GAME_BEGIN,\r\n  GameActionType,\r\n  JOIN_GAME_BEGIN,\r\n  START_GAME,\r\n  REGISTER_MOVE,\r\n} from \"../actions/types\";\r\n\r\nexport function* generalSaga(params: any): IterableIterator<any> {\r\n  yield takeEvery(CONNECT_PLAYER_BEGIN, () => {\r\n    params.socket.send(\r\n      JSON.stringify({\r\n        method: \"connect\",\r\n      })\r\n    );\r\n  });\r\n\r\n  yield takeEvery(CREATE_GAME_BEGIN, (action: GameActionType) => {\r\n    params.socket.send(\r\n      JSON.stringify({\r\n        method: \"create\",\r\n        data: action.payload,\r\n      })\r\n    );\r\n  });\r\n\r\n  yield takeEvery(JOIN_GAME_BEGIN, (action: GameActionType) => {\r\n    params.socket.send(\r\n      JSON.stringify({\r\n        method: \"join\",\r\n        data: action.payload,\r\n      })\r\n    );\r\n  });\r\n\r\n  yield takeEvery(START_GAME, (action: GameActionType) => {\r\n    params.socket.send(\r\n      JSON.stringify({\r\n        method: \"start\",\r\n        data: action.payload,\r\n      })\r\n    );\r\n  });\r\n\r\n  yield takeEvery(REGISTER_MOVE, (action: GameActionType) => {\r\n    params.socket.send(\r\n      JSON.stringify({\r\n        method: \"movement\",\r\n        data: action.payload,\r\n      })\r\n    );\r\n  });\r\n}\r\n","import createSagaMiddleware, { SagaMiddleware } from \"@redux-saga/core\";\r\nimport AppState from \"./store\";\r\nimport { Store, createStore, applyMiddleware } from \"redux\";\r\nimport gamesReducer from \"../reducers/gameReducer\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport configureSocket from \"../../sockets/configure-socket\";\r\nimport { generalSaga } from \"../sagas/Saga\";\r\n\r\nconst sagaMiddleware: SagaMiddleware<AppState> = createSagaMiddleware();\r\n\r\nexport default function configureStore() {\r\n  const store: Store<AppState> = createStore(\r\n    gamesReducer,\r\n    composeWithDevTools(applyMiddleware(sagaMiddleware))\r\n  );\r\n\r\n  const socket = configureSocket(store.dispatch);\r\n\r\n  sagaMiddleware.run(generalSaga, { socket });\r\n\r\n  return store;\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./assets/scss/index.scss\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport configureStore from \"./redux/store/configure-store\";\r\n\r\nconst store = configureStore();\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n","import {\r\n  connectPlayerSuccess,\r\n  createGameSuccess,\r\n  joinGameSuccess,\r\n  startGame,\r\n  updateGame,\r\n} from \"../redux/actions/actions\";\r\nimport {\r\n  AbstractResponse,\r\n  ConnectResponse,\r\n  CreateGameResponse,\r\n  JoinGameResponse,\r\n  UpdateGameResponse,\r\n} from \"../models/Responses\";\r\n\r\nexport default function configureSocket(dispatch: any) {\r\n  const ws: WebSocket = new WebSocket(\"wss://aqueous-peak-02889.herokuapp.com\");\r\n\r\n  ws.onmessage = (message) => {\r\n    let response: AbstractResponse = JSON.parse(message.data);\r\n    const { method, data } = response;\r\n\r\n    switch (method) { // must check is actual response or error\r\n      case \"connect\": {\r\n        console.log(\"CONNECT RECEIVED: \", response);\r\n        const connectionData: ConnectResponse = data as ConnectResponse;\r\n        dispatch(connectPlayerSuccess(connectionData));\r\n        break;\r\n      }\r\n      case \"create\": {\r\n        console.log(\"CREATE RECEIVED: \", response);\r\n        const createData: CreateGameResponse = data as CreateGameResponse;\r\n        dispatch(createGameSuccess(createData));\r\n        break;\r\n      }\r\n      case \"join\": {\r\n        console.log(\"JOIN RECEIVED: \", response);\r\n        const joinData: JoinGameResponse = data as JoinGameResponse;\r\n        dispatch(joinGameSuccess(joinData));\r\n        break;\r\n      }\r\n      case \"start\": {\r\n        console.log(\"START RECEIVED: \", response);\r\n        const startData: string = data as unknown as string;\r\n        dispatch(startGame(startData));\r\n        break;\r\n      }\r\n      case \"update\": {\r\n        console.log(\"UPDATE RECEIVED: \", response);\r\n        const data: UpdateGameResponse = response.data as UpdateGameResponse;\r\n        dispatch(updateGame(data));\r\n        break;\r\n      }\r\n      default:\r\n        console.log(\"Unknown response.\");\r\n        break;\r\n    }\r\n  };\r\n\r\n  return ws;\r\n}\r\n"],"sourceRoot":""}